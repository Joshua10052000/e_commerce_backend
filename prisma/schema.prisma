generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String?

  accounts  Account[]
  reviews   Review[]
  wishlists Wishlist[]
  orders    Order[]
  cart      Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Account {
  userId            String
  providerAccountId String
  provider          String
  type              String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  priceCents  Float
  images      String[]
  categories  Category[]

  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  wishlists  Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  image       String
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String @id @default(uuid())
  userId      String
  productId   String
  description String
  stars       Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Avoid multiple instance of review if already review in this product
  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  cartItems CartItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Avoid multiple instance of cart item if the product is in cart
  @@unique([cartId, productId])
}

model Wishlist {
  id        String @id @default(uuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  totalCents Float
  orderItems OrderItem[]

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
